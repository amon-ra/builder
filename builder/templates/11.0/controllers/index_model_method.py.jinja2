        """function related to model display"""
        BlogPost = request.env[{{ model }}]
        date_begin, date_end, state = kwargs.get('date_begin'), kwargs.get('date_end'), kwargs.get('state')
        search_string = kwargs.get('search', None)
        post_per_page = kwargs.get('post_per_page',10)       
        published_count, unpublished_count = 0, 0

        domain = request.website.website_domain()

        if date_begin and date_end:
            domain += [("write_date", ">=", date_begin), ("write_date", "<=", date_end)]


        offset = (page - 1) * post_per_page
        first_post = BlogPost
        if not blog:
            first_post = BlogPost.search(domain + [('website_published', '=', True)], order="post_date desc, id asc", limit=1)
            if use_cover and not fullwidth_cover:
                offset += 1

        posts = BlogPost.search(domain, offset=offset, limit=post_per_page, order="is_published desc, post_date desc, id asc")
        total = BlogPost.search_count(domain)

        pager = request.website.pager(
            url=request.httprequest.path.partition('/page/')[0],
            total=total,
            page=page,
            step=post_per_page,
        )
        # for performance prefetch the first post with the others
        post_ids = (first_post | posts).ids

        values = {
            'date_begin': date_begin,
            'date_end': date_end,
            'first_post': first_post.with_prefetch(post_ids),
            'pager': pager,
            'posts': posts.with_prefetch(post_ids),
            'domain': domain,
            'state_info': state and {"state": state, "published": published_count, "unpublished": unpublished_count},
            #'other_tags': other_tags,
            #'tag_category': tag_category,
            #'nav_list': self.nav_list(),
            #'tags_list': self.tags_list,            
            #'tag': tags,
            #'active_tag_ids': active_tag_ids,
        }
        response = request.render({{ page_id }}, values)
        return response
